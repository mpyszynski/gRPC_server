// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcDemoClient is the client API for GrpcDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcDemoClient interface {
	GetEcho(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
}

type grpcDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcDemoClient(cc grpc.ClientConnInterface) GrpcDemoClient {
	return &grpcDemoClient{cc}
}

func (c *grpcDemoClient) GetEcho(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/grpctest.GrpcDemo/GetEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcDemoServer is the server API for GrpcDemo service.
// All implementations must embed UnimplementedGrpcDemoServer
// for forward compatibility
type GrpcDemoServer interface {
	GetEcho(context.Context, *Echo) (*Echo, error)
	mustEmbedUnimplementedGrpcDemoServer()
}

// UnimplementedGrpcDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcDemoServer struct {
}

func (UnimplementedGrpcDemoServer) GetEcho(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEcho not implemented")
}
func (UnimplementedGrpcDemoServer) mustEmbedUnimplementedGrpcDemoServer() {}

// UnsafeGrpcDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcDemoServer will
// result in compilation errors.
type UnsafeGrpcDemoServer interface {
	mustEmbedUnimplementedGrpcDemoServer()
}

func RegisterGrpcDemoServer(s grpc.ServiceRegistrar, srv GrpcDemoServer) {
	s.RegisterService(&GrpcDemo_ServiceDesc, srv)
}

func _GrpcDemo_GetEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcDemoServer).GetEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpctest.GrpcDemo/GetEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcDemoServer).GetEcho(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcDemo_ServiceDesc is the grpc.ServiceDesc for GrpcDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.GrpcDemo",
	HandlerType: (*GrpcDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEcho",
			Handler:    _GrpcDemo_GetEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/echo-service.proto",
}
